import {
  convertAreaCoordsToCoordsMap,
  convertDBDesksCoordsToCoordsMap,
  convertMapObjectToWireObject,
  convertWireObjectToMapObjectDBPartial,
  MapObjectDB,
  objectsArrayToDict,
  objectsDictToArray,
} from "../GameMap";
import { factories } from "../public/factories";
import { omit } from "ramda";

it("converts between wire objects and db objects consistently", () => {
  const firstWireObject = factories.wireObject.build({
    propertiesJson: `{"url":"https://gather.town"}`,
  });

  const firstDbObject = convertWireObjectToMapObjectDBPartial(firstWireObject);
  const secondWireObject = convertMapObjectToWireObject(firstDbObject);
  const secondDbObject = convertWireObjectToMapObjectDBPartial(secondWireObject);

  expect(firstWireObject).toEqual(secondWireObject);
  expect(firstDbObject).toEqual(secondDbObject);
});

it("converts objects to/from array/dict consistently", () => {
  const objectsArray1 = new Array(20).fill("").map(() => factories.mapObjectDB.build());

  const objectsDict1 = objectsArrayToDict(objectsArray1);
  const objectsArray2 = objectsDictToArray(objectsDict1);
  const objectsDict2 = objectsArrayToDict(objectsArray2);

  // zIndex on the array doesn't matter and is ignored, since array order is what matters
  const withoutZIndex = (arr: Partial<MapObjectDB>[]) => arr.map((o) => omit(["zIndex"], o));
  expect(withoutZIndex(objectsArray1)).toEqual(withoutZIndex(objectsArray2));
  expect(objectsDict1).toEqual(objectsDict2);
});

describe("#convertWireAreasToDBAreas", () => {
  const mapWidth = 5;
  const mapHeight = 5;

  it("converts wire areas to a coords map", () => {
    const coords = [
      { x1: 0, y1: 1, x2: 0, y2: 2 },
      { x1: 2, y1: 3, x2: 3, y2: 4 },
    ];
    const coordsMap = convertAreaCoordsToCoordsMap(coords, [mapWidth, mapHeight]);

    expect(coordsMap).toEqual({
      "1": { "0": true },
      "2": { "0": true },
      "3": { "2": true, "3": true },
      "4": { "2": true, "3": true },
    });
  });

  it("works when areas overlap", () => {
    const coords = [
      { x1: 0, y1: 0, x2: 2, y2: 2 },
      { x1: 1, y1: 1, x2: 4, y2: 4 },
    ];
    const coordsMap = convertAreaCoordsToCoordsMap(coords, [mapWidth, mapHeight]);

    expect(coordsMap).toEqual({
      "0": { "0": true, "1": true, "2": true },
      "1": { "0": true, "1": true, "2": true, "3": true, "4": true },
      "2": { "0": true, "1": true, "2": true, "3": true, "4": true },
      "3": { "1": true, "2": true, "3": true, "4": true },
      "4": { "1": true, "2": true, "3": true, "4": true },
    });
  });

  it("works when coordinates are not in order", () => {
    const coords = [
      { x1: 2, y1: 2, x2: 1, y2: 1 },
      { x1: 4, y1: 4, x2: 3, y2: 3 },
    ];
    const coordsMap = convertAreaCoordsToCoordsMap(coords, [mapWidth, mapHeight]);

    expect(coordsMap).toEqual({
      "1": { "1": true, "2": true },
      "2": { "1": true, "2": true },
      "3": { "3": true, "4": true },
      "4": { "3": true, "4": true },
    });
  });

  it("clips when coords are out of bounds", () => {
    const coords = [
      { x1: 1, y1: 1, x2: 2, y2: 2 },
      { x1: 3, y1: 3, x2: 5, y2: 5 },
    ];
    const coordsMap = convertAreaCoordsToCoordsMap(coords, [mapWidth, mapHeight]);

    expect(coordsMap).toEqual({
      "1": { "1": true, "2": true },
      "2": { "1": true, "2": true },
      "3": { "3": true, "4": true },
      "4": { "3": true, "4": true },
    });
  });
});

describe("#convertDBDesksCoordsToCoordsMap", () => {
  const mapWidth = 5;
  const mapHeight = 5;

  it("converts db desks to coords map, handles overlapping and clipping", () => {
    const coords = [
      { x1: 1, y1: 1, x2: 3, y2: 3 },
      { x1: 3, y1: 3, x2: 5, y2: 5 },
    ];
    const dbDesks = { desk1: { coords } };
    const coordsMap = convertDBDesksCoordsToCoordsMap(dbDesks, [mapWidth, mapHeight]);

    expect(coordsMap).toEqual([
      ["", "", "", "", ""],
      ["", "desk1", "desk1", "desk1", ""],
      ["", "desk1", "desk1", "desk1", ""],
      ["", "desk1", "desk1", "desk1", "desk1"],
      ["", "", "", "desk1", "desk1"],
    ]);
  });

  it("overwrites overlapping desk ids", () => {
    const coords1 = [
      { x1: 1, y1: 1, x2: 3, y2: 3 },
      { x1: 3, y1: 3, x2: 5, y2: 5 },
    ];
    const coords2 = [{ x1: 3, y1: 3, x2: 0, y2: 0 }];
    const dbDesks = { desk1: { coords: coords1 }, desk2: { coords: coords2 } };
    const coordsMap = convertDBDesksCoordsToCoordsMap(dbDesks, [mapWidth, mapHeight]);

    expect(coordsMap).toEqual([
      ["desk2", "desk2", "desk2", "desk2", ""],
      ["desk2", "desk2", "desk2", "desk2", ""],
      ["desk2", "desk2", "desk2", "desk2", ""],
      ["desk2", "desk2", "desk2", "desk2", "desk1"],
      ["", "", "", "desk1", "desk1"],
    ]);
  });
});
