"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.base64StringToNum = exports.numToBase64 = void 0;
const _Rixits = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_";
const numToBase64 = (number) => {
    if (isNaN(Number(number)) || number === null || number === Number.POSITIVE_INFINITY) {
        throw "The input is not valid";
    }
    if (number < 0) {
        throw "Can't represent negative numbers now";
    }
    let rixit;
    let residual = Math.floor(number);
    let result = "";
    do {
        rixit = residual % 64;
        result = _Rixits.charAt(rixit) + result;
        residual = Math.floor(residual / 64);
    } while (residual !== 0);
    return result;
};
exports.numToBase64 = numToBase64;
const base64StringToNum = (rixits) => {
    let result = 0;
    const rixitsList = rixits.split("");
    for (let e = 0; e < rixitsList.length; e++) {
        result = result * 64 + _Rixits.indexOf(rixitsList[e]);
    }
    return result;
};
exports.base64StringToNum = base64StringToNum;
//# sourceMappingURL=base64.js.map